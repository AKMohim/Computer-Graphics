//Village Night

#include <windows.h>
#include <GL/glut.h>
#include <math.h>

#include <math.h>

bool isDay = true;
bool isRaining = false;

struct Raindrop {
    float x;
    float y;
    float speed;
};

const int MAX_RAIN_DROPS = 700;
Raindrop raindrops[MAX_RAIN_DROPS];
float initialRainSpeed = 0.05f;
float rainSpeedIncrement = 0.005f;
float waterLevel = 0.4f;

void initializeRain() {
    for (int i = 0; i < MAX_RAIN_DROPS; ++i) {
        raindrops[i].x = (float) (rand() % 2000 - 1000) / 1000.0f;
        raindrops[i].y = (float) (rand() % 2000 - 1000) / 1000.0f;
        raindrops[i].speed = (float) (rand() % 100) / 1000.0f + 0.01f;
    }
}

void Rain() {

    glBegin(GL_QUADS);
    glColor3ub(21, 67, 96);
    glVertex2f(waterLevel,0.26f);
    glVertex2f(waterLevel, -1.0f);
    glVertex2f(1.0f, -1.0f);
    glVertex2f(1.0f, 0.26f);
    glEnd();

    if (isRaining) {
        glBegin(GL_QUADS);
        glColor3f(0.5f, 0.5f, 1.0f);
        for (int i = 0; i < MAX_RAIN_DROPS; ++i) {
            glVertex2f(raindrops[i].x, raindrops[i].y);
            glVertex2f(raindrops[i].x + 0.01f, raindrops[i].y);
            glVertex2f(raindrops[i].x + 0.01f, raindrops[i].y - 0.02f);
            glVertex2f(raindrops[i].x, raindrops[i].y - 0.02f);

            raindrops[i].y -= raindrops[i].speed;

            if (raindrops[i].y < -1.0f) {
                raindrops[i].x = (float)(rand() % 2000 - 1000) / 1000.0f;
                raindrops[i].y = 1.0f;
                raindrops[i].speed = initialRainSpeed;
            }
        }
        glEnd();


    }
}

void River(){
    glBegin(GL_QUADS);
	glColor3ub(21, 67, 96);

	glVertex2f(-1.0, -1.0);
	glVertex2f(1.0, -1.0);
	glVertex2f(1.0, 0.3);
	glVertex2f(-1.0, 0.3);


	glEnd();
}

void Ground(float Px, float Py){
    glBegin(GL_POLYGON);
	glColor3ub(20,40,30);

	glVertex2f(-1.0+Px, -1.0+Py);
	glVertex2f(0.0+Px, -1.0+Py);
	glVertex2f(0.2+Px, -0.75+Py);
	glVertex2f(0.0+Px, -0.5+Py);
	glVertex2f(-1.0+Px, -0.5+Py);

	glEnd();
}

void Sky(){
    glBegin(GL_QUADS);
	glColor3ub(15,15,25);

	glVertex2f(-1.0, 0.3);
	glVertex2f(1.0, 0.3);
	glVertex2f(1.0, 1.0);
	glVertex2f(-1.0, 1.0);

	glEnd();
}

void Road(){
    glBegin(GL_QUADS);
	glColor3ub(30,30,30);

	glVertex2f(-0.68, -1.0);
	glVertex2f(-0.44, -1.0);
	glVertex2f(-0.05, -0.45);
	glVertex2f(-0.05, -0.25);

	glEnd();

	 glBegin(GL_QUADS);
	glColor3ub(30,30,30);

	glVertex2f(-0.18, -0.44);
	glVertex2f(-0.05, -0.25);
	glVertex2f(-0.26, 0.0);
	glVertex2f(-0.48, 0.0);

	glEnd();
}

void Home(){
    glBegin(GL_QUADS);
	glColor3ub(145, 148, 120 );

	glVertex2f(-0.55, 0.0);
	glVertex2f(-0.2, 0.0);
	glVertex2f(-0.20, 0.2);
	glVertex2f(-0.55, 0.2);

	glEnd();

	glBegin(GL_QUADS);
	glColor3ub(246,236,77);

	glVertex2f(-0.45, 0.0);
	glVertex2f(-0.3, 0.0);
	glVertex2f(-0.3, 0.13);
	glVertex2f(-0.45, 0.13);

	glEnd();

	 glBegin(GL_QUADS);
	glColor3ub(50,50,50);

	glVertex2f(-0.55, 0.2);
	glVertex2f(-0.2, 0.2);
	glVertex2f(-0.3, 0.3);
	glVertex2f(-0.65, 0.3);

	glEnd();

	 glBegin(GL_POLYGON);
	glColor3ub(145, 148, 120 );

	glVertex2f(-0.75, 0.0);
	glVertex2f(-0.55, 0.0);
	glVertex2f(-0.55, 0.2);
	glVertex2f(-0.65, 0.3);
	glVertex2f(-0.75, 0.2);

	glEnd();

	glBegin(GL_LINES);
	glColor3ub(255,255,255);

	glVertex2f(-0.55, 0.0);
	glVertex2f(-0.55, 0.2);

	glEnd();

	glBegin(GL_POLYGON);
	glColor3ub(246, 236, 77);

	glVertex2f(-0.7, 0.06);
	glVertex2f(-0.62, 0.06);
	glVertex2f(-0.62, 0.13);
	glVertex2f(-0.7, 0.13);

	glEnd();
}

void Cinn(){
    glBegin(GL_POLYGON);
	glColor3ub(183,175,49);

	glVertex2f(-0.95, 0.0);
	glVertex2f(-0.8, 0.0);
	glVertex2f(-0.8, 0.12);
	glVertex2f(-0.88, 0.23);
	glVertex2f(-0.95, 0.12);

	glEnd();

	glBegin(GL_LINES);
	glColor3ub(183,175,49);

	glVertex2f(-0.88, 0.26);
	glVertex2f(-0.88, 0.23);

	glEnd();
}

void Tree(){
    glBegin(GL_POLYGON);
	glColor3ub(32,64,24);

	glVertex2f(-0.15, 0.0);
	glVertex2f(-0.05, 0.0);
	glVertex2f(-0.05, 0.35);
	glVertex2f(-0.15, 0.35);

	glEnd();

	glBegin(GL_POLYGON);
	for(int i=0;i<200;i++)
        {
            glColor3ub(0,128,0);
            float pi=3.1416;
            float A=(i*2*pi)/200;
            float r=0.13;
            float x = r * cos(A);
            float y = r * sin(A);
            glVertex2f(x-0.2,y+0.35);
        }

        glEnd();

        glBegin(GL_POLYGON);
	for(int i=0;i<200;i++)
        {
            glColor3ub(0,128,0);
            float pi=3.1416;
            float A=(i*2*pi)/200;
            float r=0.13;
            float x = r * cos(A);
            float y = r * sin(A);
            glVertex2f(x,y+0.35);
        }

        glEnd();

        glBegin(GL_POLYGON);
	for(int i=0;i<200;i++)
        {
            glColor3ub(0,128,0);
            float pi=3.1416;
            float A=(i*2*pi)/200;
            float r=0.13;
            float x = r * cos(A);
            float y = r * sin(A);
            glVertex2f(x-0.1,y+0.5);
        }

        glEnd();

}

void Grass(float pX,float pY){
    glBegin(GL_TRIANGLES);
    glColor3b(24,72,10);

    glVertex2d(-0.74+pX,-0.56+pY);
    glVertex2d(-0.7+pX,-0.56+pY);
    glVertex2d(-0.72+pX,-0.5+pY);
    glEnd();

    glBegin(GL_TRIANGLES);
    glColor3b(24,72,10);

    glVertex2d(-0.78+pX,-0.52+pY);
    glVertex2d(-0.762+pX,-0.51+pY);
    glVertex2d(-0.76+pX,-0.5+pY);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3b(24,72,10);

    glVertex2d(-0.745+pX,-0.56+pY);
    glVertex2d(-0.74+pX,-0.56+pY);
    glVertex2d(-0.739+pX,-0.557+pY);
    glVertex2d(-0.76+pX,-0.5+pY);
    glVertex2d(-0.762+pX,-0.51+pY);
    glEnd();

    glBegin(GL_TRIANGLES);
    glColor3b(24,72,10);

    glVertex2d(-0.66+pX,-0.52+pY);
    glVertex2d(-0.678+pX,-0.51+pY);
    glVertex2d(-0.68+pX,-0.5+pY);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3b(24,72,10);

    glVertex2d(-0.695+pX,-0.56+pY);
    glVertex2d(-0.7+pX,-0.56+pY);
    glVertex2d(-0.701+pX,-0.557+pY);
    glVertex2d(-0.68+pX,-0.5+pY);
    glVertex2d(-0.678+pX,-0.51+pY);
    glEnd();

    glBegin(GL_TRIANGLES);
    glColor3b(24,72,10);

    glVertex2d(-0.695+pX,-0.51+pY);
    glVertex2d(-0.704+pX,-0.504+pY);
    glVertex2d(-0.705+pX,-0.5+pY);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3b(24,72,10);

    glVertex2d(-0.712+pX,-0.524+pY);
    glVertex2d(-0.71+pX,-0.53+pY);
    glVertex2d(-0.704+pX,-0.504+pY);
    glVertex2d(-0.705+pX,-0.5+pY);
    glEnd();

    glBegin(GL_TRIANGLES);
    glColor3b(24,72,10);

    glVertex2d(-0.746+pX,-0.51+pY);
    glVertex2d(-0.738+pX,-0.504+pY);
    glVertex2d(-0.736+pX,-0.5+pY);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3b(24,72,10);

    glVertex2d(-0.728+pX,-0.524+pY);
    glVertex2d(-0.73+pX,-0.53+pY);
    glVertex2d(-0.738+pX,-0.504+pY);
    glVertex2d(-0.736+pX,-0.5+pY);
    glEnd();


}

void Boat(){
    glBegin(GL_QUADS);
	glColor3ub(47,28,71);

	glVertex2f(0.25, -0.70);
	glVertex2f(0.4, -0.7);
	glVertex2f(0.5, -0.6);
	glVertex2f(0.15, -0.6);

	glEnd();
}

void Mountain(){
    glBegin(GL_TRIANGLES);
	glColor3ub(98,117,47);

	glVertex2f(-0.86,0.3);
	glVertex2f(-0.34,0.3);
	glVertex2f(-0.6,0.5);

	glEnd();

	glBegin(GL_TRIANGLES);
	glColor3ub(98,117,47);

	glVertex2f(-0.1,0.3);
	glVertex2f(0.3,0.3);
	glVertex2f(0.1,0.5);

	glEnd();

	glBegin(GL_TRIANGLES);
	glColor3ub(98,117,47);

	glVertex2f(0.38,0.3);
	glVertex2f(0.76,0.3);
	glVertex2f(0.58,0.5);

	glEnd();

	glBegin(GL_POLYGON);
	glColor3ub(42,72,18);

	glVertex2f(-1.0,0.3);
	glVertex2f(-0.86,0.3);
	glVertex2f(-0.73,0.4);
	glVertex2f(-0.91,0.51);
	glVertex2f(-1.0,0.45);

	glEnd();

	glBegin(GL_POLYGON);
	glColor3ub(42,72,18);

	glVertex2f(-0.34,0.3);
	glVertex2f(-0.1,0.3);
	glVertex2f(-0.02,0.38);
	glVertex2f(-0.22,0.5);
	glVertex2f(-0.444,0.38);

	glEnd();

	glBegin(GL_POLYGON);
	glColor3ub(42,72,18);

	glVertex2f(0.3,0.3);
	glVertex2f(0.38,0.3);
	glVertex2f(0.48,0.4);
	glVertex2f(0.34,0.5);
	glVertex2f(0.2,0.4);

	glEnd();
}

void Boat22(float pX,float pY){
    glBegin(GL_QUADS);
	glColor3ub(75,63,71);

	glVertex2f(0.75+pX, 0.05+pY);
	glVertex2f(0.9+pX, 0.05+pY);
	glVertex2f(1.0+pX, 0.15+pY);
	glVertex2f(0.65+pX,0.15+pY);

	glEnd();

	glBegin(GL_QUADS);
	glColor3ub(144,110,135);

	glVertex2f(0.75+pX, 0.15+pY);
	glVertex2f(0.9+pX, 0.15+pY);
	glVertex2f(0.9+pX, 0.25+pY);
	glVertex2f(0.75+pX,0.25+pY);

	glEnd();
}


void display() {
	glClearColor(0.60f, 0.60f, 0.60f, 1.0f);
	glClear(GL_COLOR_BUFFER_BIT);
	River();
	Boat22(-1.7,0.05);
	Sky();
	Ground(0,0);
	Ground(0,0.5);
	Road();
	Home();
	Cinn();
	Grass(0,0);
	Grass(0.3,0);
	Grass(-0.1,0.45);
	Grass(0.3,0.2);
	Grass(0.0,0.3);
	Grass(-0.2,0.1);
	Grass(0.2,0.45);
	Grass(0.3,00.3);
	Grass(0.3,-0.10);
	//Boat();


	Mountain();
	//Tree();
	//Boat22(0,0);
	//Boat22(-0.4,-0.2);
	//Boat22(-0.5,0.1);
	//Boat22(-0.25,-0.6);
	Rain();

	glFlush();
}

void increaseRainSpeed() {
    for (int i = 0; i < MAX_RAIN_DROPS; ++i) {
        raindrops[i].speed += rainSpeedIncrement;
    }
}

void keyboard(unsigned char key, int x, int y) {
    switch (key) {
    case 'R':
    case 'r':
        isRaining=true;

    case 'S':
    case 's':

       increaseRainSpeed();
        break;
    }
}

void TimerWaterlevel(int value)
{
    if(isRaining){
        waterLevel-=0.003;
       if (waterLevel <= -0.2)
            waterLevel=-0.2;
    }
    glutPostRedisplay();
    glutTimerFunc(100, TimerWaterlevel, 0);

}


int main(int argc, char** argv) {
	glutInit(&argc, argv);
	glutCreateWindow("Rain");
	glutInitWindowSize(320, 320);
	initializeRain();
    glutDisplayFunc(display);
    glutKeyboardFunc(keyboard);

   glutTimerFunc(150, TimerWaterlevel, 0);
	glutMainLoop();
	return 0;
}

